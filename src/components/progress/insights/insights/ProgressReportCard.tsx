
import React, { useRef } from 'react';
import { Card, CardHeader, CardTitle, CardDescription, CardContent } from "@/components/ui/card";
import { FileDown, Share2, Printer, Image } from "lucide-react";
import html2canvas from 'html2canvas';
import { jsPDF } from 'jspdf';
import { toast } from "sonner";
import { useAuth } from "@/hooks/useAuth";
import { useMeditationStats } from "@/components/progress/useMeditationStats";

const ProgressReportCard: React.FC = () => {
  const { user } = useAuth();
  const { meditationStats } = useMeditationStats();
  const contentRef = useRef<HTMLDivElement>(null);
  
  // Generate a report content that will be used for exporting
  const generateReportContent = () => {
    const today = new Date().toLocaleDateString();
    const userName = user?.email?.split('@')[0] || 'User';
    
    return (
      <div 
        ref={contentRef} 
        className="p-6 bg-white rounded-lg shadow-sm hidden absolute left-0 right-0"
        id="report-content"
        style={{ width: '800px', minHeight: '600px' }}
      >
        <div className="flex justify-between items-center mb-6 border-b pb-4">
          <h1 className="text-2xl font-bold text-primary">Meditation Progress Report</h1>
          <div className="text-sm text-muted-foreground">Generated on: {today}</div>
        </div>
        
        <div className="mb-6">
          <h2 className="text-xl font-semibold mb-2">User: {userName}</h2>
          <p className="text-muted-foreground">Summary of your meditation journey</p>
        </div>
        
        <div className="grid grid-cols-3 gap-4 mb-6">
          <div className="bg-secondary/30 p-4 rounded-md">
            <h3 className="font-medium text-sm text-muted-foreground">Total Sessions</h3>
            <p className="text-2xl font-bold">{meditationStats.totalSessions}</p>
          </div>
          <div className="bg-secondary/30 p-4 rounded-md">
            <h3 className="font-medium text-sm text-muted-foreground">Total Minutes</h3>
            <p className="text-2xl font-bold">{meditationStats.totalMinutes}</p>
          </div>
          <div className="bg-secondary/30 p-4 rounded-md">
            <h3 className="font-medium text-sm text-muted-foreground">Current Streak</h3>
            <p className="text-2xl font-bold">{meditationStats.streak} days</p>
          </div>
        </div>
        
        <div className="mb-6">
          <h3 className="text-lg font-semibold mb-3">Recent Achievements</h3>
          <div className="space-y-2">
            {meditationStats.achievements
              .filter(a => a.unlocked)
              .slice(0, 3)
              .map((achievement, i) => (
                <div key={i} className="flex items-center p-3 bg-secondary/20 rounded-md">
                  <div className="mr-3 p-2 bg-primary/10 rounded-full">
                    {achievement.icon && (
                      <span className="text-primary">{achievement.icon}</span>
                    )}
                  </div>
                  <div>
                    <h4 className="font-medium">{achievement.name}</h4>
                    <p className="text-sm text-muted-foreground">{achievement.description}</p>
                  </div>
                </div>
              ))}
          </div>
        </div>
        
        <div className="mb-6">
          <h3 className="text-lg font-semibold mb-3">Focus & Stress Correlation</h3>
          <div className="grid grid-cols-2 gap-4">
            <div className="bg-secondary/30 p-4 rounded-md">
              <h4 className="font-medium text-sm mb-1">Focus Score with Meditation</h4>
              <p className="text-2xl font-bold">{meditationStats.focusCorrelation.withMeditation}%</p>
            </div>
            <div className="bg-secondary/30 p-4 rounded-md">
              <h4 className="font-medium text-sm mb-1">Stress Level Reduction</h4>
              <p className="text-2xl font-bold">
                {meditationStats.moodCorrelation.withMeditation - meditationStats.moodCorrelation.withoutMeditation}%
              </p>
            </div>
          </div>
        </div>
        
        <div className="text-center text-sm text-muted-foreground mt-8 pt-4 border-t">
          <p>Generated by MindfulMe Meditation App</p>
        </div>
      </div>
    );
  };

  // Function to export the report as PDF
  const exportAsPDF = async () => {
    if (!contentRef.current) {
      toast.error("Could not generate report. Please try again.");
      return;
    }

    try {
      toast.info("Generating PDF...");
      
      // Make the report content visible for capturing
      contentRef.current.style.display = 'block';
      contentRef.current.style.position = 'fixed';
      contentRef.current.style.zIndex = '-1000';
      
      const canvas = await html2canvas(contentRef.current, {
        scale: 2,
        logging: false,
        useCORS: true,
        backgroundColor: '#ffffff'
      });
      
      // Hide the report content again
      contentRef.current.style.display = 'none';
      
      const imgData = canvas.toDataURL('image/png');
      const pdf = new jsPDF({
        orientation: 'portrait',
        unit: 'px',
        format: [canvas.width, canvas.height]
      });
      
      pdf.addImage(imgData, 'PNG', 0, 0, canvas.width, canvas.height);
      pdf.save(`meditation_progress_${new Date().toISOString().split('T')[0]}.pdf`);
      
      toast.success("PDF Downloaded Successfully");
    } catch (error) {
      console.error("Error generating PDF:", error);
      toast.error("Failed to generate PDF. Please try again.");
    }
  };

  // Function to export the report as an image
  const exportAsImage = async () => {
    if (!contentRef.current) {
      toast.error("Could not generate report. Please try again.");
      return;
    }

    try {
      toast.info("Generating image...");
      
      // Make the report content visible for capturing
      contentRef.current.style.display = 'block';
      contentRef.current.style.position = 'fixed';
      contentRef.current.style.zIndex = '-1000';
      
      const canvas = await html2canvas(contentRef.current, {
        scale: 2,
        logging: false,
        useCORS: true,
        backgroundColor: '#ffffff'
      });
      
      // Hide the report content again
      contentRef.current.style.display = 'none';
      
      // Convert to a data URL and then create a download link
      const imgData = canvas.toDataURL('image/png');
      const link = document.createElement('a');
      link.download = `meditation_progress_${new Date().toISOString().split('T')[0]}.png`;
      link.href = imgData;
      link.click();
      
      toast.success("Image Downloaded Successfully");
    } catch (error) {
      console.error("Error generating image:", error);
      toast.error("Failed to generate image. Please try again.");
    }
  };

  // Function to print the report
  const printReport = async () => {
    if (!contentRef.current) {
      toast.error("Could not generate report. Please try again.");
      return;
    }

    try {
      toast.info("Preparing to print...");
      
      // Make the report content visible for capturing
      contentRef.current.style.display = 'block';
      contentRef.current.style.position = 'fixed';
      contentRef.current.style.zIndex = '-1000';
      
      const canvas = await html2canvas(contentRef.current, {
        scale: 2,
        logging: false,
        useCORS: true,
        backgroundColor: '#ffffff'
      });
      
      // Hide the report content again
      contentRef.current.style.display = 'none';
      
      const imgData = canvas.toDataURL('image/png');
      
      // Create a new window and document for printing
      const printWindow = window.open('', '_blank');
      if (!printWindow) {
        toast.error("Pop-up blocked. Please allow pop-ups to print.");
        return;
      }
      
      printWindow.document.write(`
        <html>
          <head>
            <title>Meditation Progress Report</title>
          </head>
          <body style="margin: 0; padding: 0;">
            <img src="${imgData}" style="width: 100%;" />
          </body>
        </html>
      `);
      
      printWindow.document.close();
      printWindow.focus();
      
      // Wait for image to load before printing
      setTimeout(() => {
        printWindow.print();
        printWindow.close();
        toast.success("Print dialog opened");
      }, 500);
      
    } catch (error) {
      console.error("Error printing report:", error);
      toast.error("Failed to print report. Please try again.");
    }
  };

  // Function to share the report (mock implementation)
  const shareReport = () => {
    // Check if the Web Share API is available
    if (navigator.share) {
      toast.info("Sharing your progress report...");
      
      // Generate a shareable title and text
      const shareData = {
        title: 'My Meditation Progress Report',
        text: `Check out my meditation stats: ${meditationStats.totalSessions} sessions, ${meditationStats.totalMinutes} minutes meditated, and ${meditationStats.streak} day streak!`,
        // In a real app, you'd generate a shareable URL here
        url: window.location.href,
      };
      
      navigator.share(shareData)
        .then(() => toast.success("Shared successfully"))
        .catch((error) => {
          console.error("Error sharing:", error);
          toast.error("Could not share report. Please try again.");
        });
    } else {
      // Fallback for browsers that don't support the Web Share API
      toast.info("Copying share link to clipboard...");
      
      // In a real app, you'd generate a shareable URL
      const dummyShareableLink = window.location.href;
      
      navigator.clipboard.writeText(dummyShareableLink)
        .then(() => toast.success("Link copied to clipboard"))
        .catch(() => toast.error("Could not copy to clipboard"));
    }
  };

  return (
    <>
      <Card>
        <CardHeader>
          <CardTitle>Weekly Progress Snapshot</CardTitle>
          <CardDescription>
            Download or share your progress report
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="flex flex-col space-y-2">
            <button 
              onClick={exportAsPDF}
              className="flex items-center justify-center w-full py-2 px-4 border border-primary/30 rounded-md hover:bg-primary/5 transition-colors"
            >
              <FileDown className="w-4 h-4 mr-2" />
              Download PDF Report
            </button>
            <button 
              onClick={exportAsImage}
              className="flex items-center justify-center w-full py-2 px-4 border border-primary/30 rounded-md hover:bg-primary/5 transition-colors"
            >
              <Image className="w-4 h-4 mr-2" />
              Export as Image
            </button>
            <button 
              onClick={printReport}
              className="flex items-center justify-center w-full py-2 px-4 border border-primary/30 rounded-md hover:bg-primary/5 transition-colors"
            >
              <Printer className="w-4 h-4 mr-2" />
              Print Report
            </button>
            <button 
              onClick={shareReport}
              className="flex items-center justify-center w-full py-2 px-4 border border-primary/30 rounded-md hover:bg-primary/5 transition-colors"
            >
              <Share2 className="w-4 h-4 mr-2" />
              Share Progress
            </button>
          </div>
        </CardContent>
      </Card>
      
      {/* Render the hidden report content for export */}
      {generateReportContent()}
    </>
  );
};

export default ProgressReportCard;
