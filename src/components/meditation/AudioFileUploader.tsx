
import React, { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Upload, Loader2, AlertCircle } from 'lucide-react';
import { toast } from 'sonner';
import { isAdmin, uploadMeditationAudio } from '@/lib/auth/adminAuth';
import { audioFileUploadSchema } from '@/lib/validation/schemas';

const AudioFileUploader = () => {
  const [file, setFile] = useState<File | null>(null);
  const [title, setTitle] = useState('');
  const [description, setDescription] = useState('');
  const [uploading, setUploading] = useState(false);
  const [checking, setChecking] = useState(true);
  const [hasAdminAccess, setHasAdminAccess] = useState(false);
  
  // SERVER-SIDE admin check on mount
  useEffect(() => {
    const checkAdminStatus = async () => {
      setChecking(true);
      const adminStatus = await isAdmin();
      setHasAdminAccess(adminStatus);
      setChecking(false);
    };

    checkAdminStatus();
  }, []);

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files.length > 0) {
      const selectedFile = e.target.files[0];

      // Validate file type
      if (!selectedFile.type.startsWith('audio/')) {
        toast.error('Please select an audio file (MP3, WAV, etc.)');
        return;
      }

      // Validate file size (100MB max)
      if (selectedFile.size > 100 * 1024 * 1024) {
        toast.error('File size exceeds 100MB limit');
        return;
      }

      setFile(selectedFile);
      // Auto-fill title from filename if empty
      if (!title) {
        const nameWithoutExt = selectedFile.name.replace(/\.[^/.]+$/, '');
        setTitle(nameWithoutExt.replace(/[-_]/g, ' '));
      }
    }
  };
  
  const handleUpload = async () => {
    if (!file || !hasAdminAccess || !title.trim()) {
      toast.error('Please provide a title for the audio file');
      return;
    }

    try {
      setUploading(true);

      // Validate input using Zod schema
      const validationResult = audioFileUploadSchema.safeParse({
        file_name: file.name,
        file_path: '', // Will be generated by Edge Function
        file_size: file.size,
        file_type: file.type,
        title: title.trim(),
        description: description.trim() || null,
      });

      if (!validationResult.success) {
        const errorMessage = validationResult.error.errors
          .map(e => e.message)
          .join(', ');
        toast.error('Validation failed', { description: errorMessage });
        return;
      }

      // Upload via secure Edge Function (server-side admin validation)
      const result = await uploadMeditationAudio(file, {
        title: title.trim(),
        description: description.trim() || undefined,
      });

      if (!result.success) {
        throw new Error(result.error || 'Upload failed');
      }

      toast.success('Audio file uploaded successfully', {
        description: `"${title}" has been added to the meditation library`,
      });

      // Clear the form
      setFile(null);
      setTitle('');
      setDescription('');

    } catch (error: any) {
      toast.error('Upload failed', {
        description: error.message || 'An unexpected error occurred',
      });
      console.error('Error uploading audio file:', error);
    } finally {
      setUploading(false);
    }
  };

  // Show loading state while checking admin status
  if (checking) {
    return (
      <Card>
        <CardContent className="py-8">
          <div className="flex items-center justify-center">
            <Loader2 className="h-6 w-6 animate-spin text-muted-foreground" />
            <span className="ml-2 text-muted-foreground">Verifying permissions...</span>
          </div>
        </CardContent>
      </Card>
    );
  }

  // Only show uploader if user has admin access (server-verified)
  if (!hasAdminAccess) {
    return (
      <Card>
        <CardContent className="py-8">
          <div className="flex items-center justify-center text-muted-foreground">
            <AlertCircle className="h-5 w-5 mr-2" />
            <span>Administrator access required to upload meditation audio</span>
          </div>
        </CardContent>
      </Card>
    );
  }
  
  return (
    <Card>
      <CardHeader>
        <CardTitle>Upload Meditation Audio</CardTitle>
        <CardDescription>Add new audio files to your meditation library</CardDescription>
      </CardHeader>
      
      <CardContent>
        <div className="space-y-4">
          <div className="grid w-full items-center gap-2">
            <Label htmlFor="audio-title">Title *</Label>
            <Input
              id="audio-title"
              type="text"
              placeholder="e.g., 10-Minute Morning Meditation"
              value={title}
              onChange={(e) => setTitle(e.target.value)}
              disabled={uploading}
              maxLength={200}
            />
          </div>

          <div className="grid w-full items-center gap-2">
            <Label htmlFor="audio-description">Description</Label>
            <Textarea
              id="audio-description"
              placeholder="Brief description of this meditation session..."
              value={description}
              onChange={(e) => setDescription(e.target.value)}
              disabled={uploading}
              maxLength={1000}
              rows={3}
            />
          </div>

          <div className="grid w-full items-center gap-2">
            <Label htmlFor="audio-file">Audio File *</Label>
            <Input
              id="audio-file"
              type="file"
              accept="audio/*"
              onChange={handleFileChange}
              disabled={uploading}
              className="cursor-pointer"
            />
            {file && (
              <p className="text-sm text-muted-foreground">
                Selected: {file.name} ({(file.size / 1024 / 1024).toFixed(2)} MB)
              </p>
            )}
            <p className="text-xs text-muted-foreground">
              Max file size: 100MB. Supported formats: MP3, WAV, OGG, M4A
            </p>
          </div>
        </div>
      </CardContent>
      
      <CardFooter className="flex justify-between">
        <p className="text-xs text-muted-foreground">
          * Required fields
        </p>
        <Button
          onClick={handleUpload}
          disabled={!file || !title.trim() || uploading}
        >
          {uploading ? (
            <>
              <Loader2 className="mr-2 h-4 w-4 animate-spin" />
              Uploading...
            </>
          ) : (
            <>
              <Upload className="mr-2 h-4 w-4" />
              Upload Audio
            </>
          )}
        </Button>
      </CardFooter>
    </Card>
  );
};

export default AudioFileUploader;
